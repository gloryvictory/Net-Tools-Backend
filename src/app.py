from flask import Flask, jsonify
from flask_cors import CORS

from flask import request

import os
from dotenv import load_dotenv

from time import strftime
import logging

from peewee import *

import gfiletools
import nslookup_realtime
import db
import nslookup_db_update
import nslookup_db_get


# Accessing variables.
#status = os.getenv('STATUS')
#secret_key = os.getenv('SECRET_KEY')

# # configuration
DEBUG = True


# instantiate the app
app = Flask(__name__)
app.config.from_object(__name__)


# enable CORS
CORS(app)

#do logging
app_file_log = str(strftime("%Y-%m-%d") + "app" + ".log")
gfiletools.do_log_file('', app_file_log)
logging.info('!!!!!!!!!!!!!!!!!!!!!!!!')


# Accessing variables.
dotenv_path = os.path.join(os.path.dirname(__file__), 'dev.env')
if os.path.exists(dotenv_path):
    load_dotenv(dotenv_path)
    #status = os.getenv('STATUS')
    app.config['API_KEY'] = os.getenv('SECRET_KEY')
    test_debug = os.getenv('DEBUG')
    DEBUG = bool(test_debug)
    FLASK_ENV = os.getenv('FLASK_ENV')
    DATABASE_URI = os.getenv("DATABASE_URI")


def get_request_headers():
    print(request)
    str_info = ''
    try:
        str_info = 'Host: ' + request.host
        logging.info(str_info)
    except Exception as e:
        str_info = str_info + "Exception occurred " + str(e)
        logging.info(str_info)

    try:
        str_info = ', remote_addr: ' + request.remote_addr
        logging.info(str_info)
    except Exception as e:
        str_info = str_info + "Exception occurred " + str(e)
        logging.info(str_info)

    try:
        str_info = ', method: ' + request.method
        logging.info(str_info)
    except Exception as e:
        str_info = str_info + "Exception occurred " + str(e)
        logging.info(str_info)

    try:
        str_info = ', headers: ' + request.headers
        logging.info(str_info)
    except Exception as e:
        str_info = str_info + "Exception occurred " + str(e)
        logging.info(str_info)

    try:
        str_info = ' origin: ' + request.origin
        logging.info(str_info)
    except Exception as e:
        str_info = str_info + "Exception occurred " + str(e)
        logging.info(str_info)


# This hook ensures that a connection is opened to handle any queries
# generated by the request.
@app.before_request
def _db_connect():
    db.database.connect()


# This hook ensures that the connection is closed when we've finished
# processing the request.
@app.teardown_request
def _db_close(exc):
    if not db.database.is_closed():
        db.database.close()


# sanity check route
@app.route('/ping', methods=['GET'])
def ping_pong():
    return jsonify('pong!')

# sanity check route
@app.route('/nslookup', methods=['GET'])
def get_nslookup():

    get_request_headers()

    qq = nslookup_realtime.get_nslookup()
    return jsonify(qq)

# Обновляем базу данных
@app.route('/nslookuptodb', methods=['GET'])
def get_nslookup_to_db():
    get_request_headers()
    qq = nslookup_db_update.get_nslookup_to_db()
    #print(qq)
    return jsonify(qq)

# читаем из базы данных информацию
@app.route('/getnslookupfromdb', methods=['GET'])
def get_nslookup_from_db():
    get_request_headers()
    qq = nslookup_db_get.get_nslookup_from_db()
    return jsonify(qq)



if __name__ == '__main__':
    #_host = '0.0.0.0'
    _host = '127.0.0.1'
    _port = 5000
    logging.info('App start at ' + _host + ', on port ' + str(_port))
    app.run(_host, _port)
